#!/usr/bin/env python

# sms-cli - command line SMS sender
# Michal Ludvig <mludvig@logix.net.nz>
# http://www.logix.cz/michal/devel/sms-cli
## License: GPL Version 2

import os
import sys

import datetime
import logging

from optparse import OptionParser
from logging import debug, info, warning, error

from Sms.Config import Config
from Sms.Sender import SmsSender
from Sms.Exceptions import *

try:
	default_config_file=os.getenv("HOME")+"/.sms-cli.conf"
except:
	default_config_file="<unset>"

## Parse command line options
default_verbosity = Config().verbosity
optparser = OptionParser()
optparser.set_defaults(config=default_config_file)
optparser.set_defaults(verbosity = default_verbosity)

optparser.add_option("-r", "--recipient", dest="recipients", action="append", metavar="PHONE-NUM", help="Cell phone number of message recipient. Can be used multiple times.")
optparser.add_option("-m", "--message", dest="message", action="store", metavar="MESSAGE", help="Message to send to given Recipient(s)")
optparser.add_option("-f", "--config", dest="config", metavar="FILE", help="Config file name. Optionally can include :PROFILE, e.g. --config=/etc/sms-cli.conf:clickatell or use --profile clickatell. Defaults to %default")
optparser.add_option("-p", "--profile", dest="profile", action="store", metavar="PROFILE", help="Config file profile / section to process. Defaults to [default]")
optparser.add_option(      "--debug", dest="verbosity", action="store_const", const=logging.DEBUG, help="Enable debug output.")
optparser.add_option(      "--quiet", dest="verbosity", action="store_const", const=logging.WARNING, help="Suppres most messages. Only Warnings and Errors are printed.")

(options, args) = optparser.parse_args()

## Some mucking with logging levels to enable
## debugging/verbose output for config file parser on request
logging.basicConfig(level=options.verbosity, format='%(levelname)s: %(message)s')

## Now finally parse the config file
try:
	cfg = Config(options.config, options.profile)
except IOError, e:
	if options.config != default_config_file:
		error("%s: %s"	% (options.config, e.strerror))
		sys.exit(1)
	else:
		cfg = Config()
except SmsConfigError, e:
	error(e.message)
	sys.exit(1)

## And again some logging level adjustments
## according to configfile and command line parameters
if options.verbosity != default_verbosity:
	cfg.verbosity = options.verbosity
logging.root.setLevel(cfg.verbosity)

## Update Config with other parameters
for option in cfg.option_list():
	try:
		if getattr(options, option) != None:
			debug("Updating %s -> %s" % (option, getattr(options, option)))
			cfg.update_option(option, getattr(options, option))
			delattr(options, option)
	except AttributeError:
		## Some Config() options are not settable from command line
		pass

if not options.message or not options.recipients:
	sys.stderr.write('Message and at least one recipient must be set!\n')
	sys.exit(1)

sms = SmsSender()
sms.send(message = options.message, recipients = options.recipients)
