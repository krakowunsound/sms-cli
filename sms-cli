#!/usr/bin/env python

## sms-cli - command line SMS sender
## Michal Ludvig <mludvig@logix.net.nz>
## http://www.logix.cz/michal/devel/sms-cli
## License: GPL Version 2

import os
import sys

import datetime
import logging

import argparse

from Sms.Config import Config
from Sms.Sender import SmsSender
from Sms.SimpleObjects import SmsMessage
from Sms.Exceptions import *
from Sms.Logger import *

try:
    default_config_file=os.getenv("HOME")+"/.sms-cli.conf"
except:
    default_config_file="<unset>"

def parse_args():
    parser = argparse.ArgumentParser(prog="sms-cli")
    subparsers = parser.add_subparsers(dest = "command")

    parser.set_defaults(verbosity = Config().verbosity)
    parser.set_defaults(config = default_config_file)

    parser.add_argument("-f", "--config", type=argparse.FileType('r'), help="Config file location")
    parser.add_argument("-p", "--profile", dest="profile", action="store", metavar="PROFILE", help="Config file profile / section to process. Defaults to [default]")
    parser_verbosity = parser.add_mutually_exclusive_group()
    parser_verbosity.add_argument("--debug", dest="verbosity", action="store_const", const=logging.DEBUG, help="Enable debug output.")
    parser_verbosity.add_argument("--quiet", dest="verbosity", action="store_const", const=logging.WARNING, help="Suppres most messages. Only Warnings and Errors are printed.")

    parser_send = subparsers.add_parser("send", help="Send SMS message")
    parser_send.add_argument("-r", "--recipient", dest="recipients", action="append", required=True, metavar="PHONE-NUM", help="Cell phone number of message recipient. Can be used multiple times.")
    parser_send.add_argument("-m", "--message", dest="message", action="store", required=True, metavar="MESSAGE", help="Message to send to given Recipient(s)")

    parser_replies = subparsers.add_parser("receive", help="Fetch received messaged from the gateway")
    parser_replies.set_defaults(senders = [], ids = [])
    parser_replies.add_argument("-s", "--sender", dest="senders", action="append", metavar="PHONE-NUM", help="Phone number of the sender. Can be used multiple times.")
    parser_replies.add_argument("-i", "--id", dest="ids", action="append", metavar="ID", help="ID of a message previously sent for which we want the replies. Can be used multiple times. The format is engine-specific.")
    parser_replies.add_argument("-k", "--keep", dest="keep", action="store_true", help="Keep the messages on the gateway, do not remove them. Some engines may not support this feature.")

    return parser.parse_args()

### Parse command line arguments
args = parse_args()

## Set logging level before parsing the config file
logger_init(level = args.verbosity)

## Now finally parse the config file
try:
    cfg = Config(args.config, args.profile)
except SmsConfigError, e:
    error(e.message)
    sys.exit(1)

## Update Config with other parameters
for option in cfg.option_list():
    try:
        if getattr(args, option) != None:
            debug("Updating %s -> %s" % (option, getattr(args, option)))
            cfg.update_option(option, getattr(args, option))
            delattr(args, option)
    except AttributeError:
        ## Some Config() options are not settable from command line
        pass

try:
    sms = SmsSender()
    if args.command == "send":
        message = SmsMessage(message = args.message, recipients = args.recipients)
        for status in sms.send(message):
            if status.despatched:
                info("Sent to %s: %s" % ("/".join(status.recipients), status.mid))
            else:
                warning("Failed to %s: %s" % ("/".join(status.recipients), status.comment))
    elif args.command == "receive":
        for message in sms.receive(senders = args.senders, in_reply_to = args.ids, keep = args.keep):
            info("[%s] from %s: %s" % (message.timestamp, message.sender, message.message))
    else:
        raise SmsConfigError("Unknown command: %s" % args.command)

except SmsConfigError, e:
    error("Config file error: %s" % e)
    sys.exit(1)
except SmsException, e:
    error(e)
    sys.exit(1)

# vim:et:ts=4:sts=4:ai
